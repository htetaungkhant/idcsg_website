generator client {
  provider = "prisma-client-js"
  output   = "../../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TeamType {
  DOCTORS
  CONSULTANT_SPECIALISTS
  ALLIED_HEALTH_SUPPORT_STAFF
}

model PreviousAdminCredentials {
  id       String @id @default(cuid())
  email    String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  password      String?
  role          UserRole        @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model HomepageSettings {
  id                String   @id @default(cuid())
  backgroundMediaUrl String?  // Cloudinary URL for background image/video
  backgroundMediaType String? // 'image' or 'video'
  backgroundColor   String?  // Hex color code
  backgroundOpacity Int      @default(100) // 0-100
  isActive          Boolean  @default(true) // Only one setting can be active at a time
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure only one active setting exists
  @@unique([isActive])
}

model Member {
  id            String   @id @default(cuid())
  imageUrl      String?  // Cloudinary URL for member photo (optional)
  name          String
  designation   String?  // Optional designation
  team          TeamType
  description   String   @db.Text
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0) // For ordering members within teams
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  title     String
  services  Service[] // One category can have multiple services
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id           String   @id @default(cuid())
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Main service information
  name         String
  overview     String   @db.Text
  
  // Service sections (one-to-one relationships)
  section1     ServiceSection1?
  section2     ServiceSection2?
  section3     ServiceSection3?
  section4     ServiceSection4?
  section5     ServiceSection5?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Section 1: Image, Title, and Description
model ServiceSection1 {
  id          String  @id @default(cuid())
  serviceId   String  @unique // One-to-one relationship with Service
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  imageUrl    String?  // Cloudinary URL for section image
  title       String?
  description String?   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Section 2: Video Link Only
model ServiceSection2 {
  id        String  @id @default(cuid())
  serviceId String  @unique // One-to-one relationship with Service
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  videoUrl  String   // Video URL (YouTube, Vimeo, or direct link)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Section 3: Image, Title, and Description
model ServiceSection3 {
  id          String  @id @default(cuid())
  serviceId   String  @unique // One-to-one relationship with Service
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  imageUrl    String?  // Cloudinary URL for section image
  title       String?
  description String?   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Section 4: Title and List of Cards
model ServiceSection4 {
  id        String                @id @default(cuid())
  serviceId String                @unique // One-to-one relationship with Service
  service   Service               @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  title     String?
  cards     ServiceSection4Card[] // List of cards for this section
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cards for Section 4 (Image, Title, Description)
model ServiceSection4Card {
  id          String          @id @default(cuid())
  section4Id  String
  section4    ServiceSection4 @relation(fields: [section4Id], references: [id], onDelete: Cascade)
  
  imageUrl    String?  // Cloudinary URL for card image
  title       String?
  description String   @db.Text
  sortOrder   Int      @default(0) // For ordering cards within section4
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Section 5: Image, Title, and List of Price Ranges
model ServiceSection5 {
  id          String                   @id @default(cuid())
  serviceId   String                   @unique // One-to-one relationship with Service
  service     Service                  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  imageUrl    String?                  // Cloudinary URL for section image
  title       String?
  priceRanges ServiceSection5PriceRange[] // List of price ranges for this section
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Price Ranges for Section 5 (Title, Start Price, End Price)
model ServiceSection5PriceRange {
  id         String          @id @default(cuid())
  section5Id String
  section5   ServiceSection5 @relation(fields: [section5Id], references: [id], onDelete: Cascade)
  
  title      String
  startPrice Decimal         @db.Decimal(10, 2) // Starting price with 2 decimal places
  endPrice   Decimal         @db.Decimal(10, 2) // Ending price with 2 decimal places
  sortOrder  Int             @default(0) // For ordering price ranges within section5
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}